========================================================================
Function resolve
========================================================================
fun add(a: int, b: int): int {
    return a + b;
}

fun test() {
    <caret>add(1, 2);
}
------------------------------------------------------------------------
5:4 -> 0:4 resolved

========================================================================
Local variable
========================================================================
fun test() {
    val a = 100;
    <caret>a;
}
------------------------------------------------------------------------
2:4 -> 1:8 resolved

========================================================================
Local variable with redef
========================================================================
fun test() {
    val a = 100;
    val a redef = 100;
    <caret>a;
}
------------------------------------------------------------------------
3:4 -> 1:8 resolved

========================================================================
Local variable with redef resolving
========================================================================
fun test() {
    val a = 100;
    val <caret>a redef = 100;
    a;
}
------------------------------------------------------------------------
2:8 -> 1:8 resolved

========================================================================
Local variable with tuple
========================================================================
fun test() {
    val [a, b] = [100, true];
    <caret>a;
    <caret>b;
}
------------------------------------------------------------------------
2:4 -> 1:9 resolved
3:4 -> 1:12 resolved

========================================================================
Local variable with deep tuple
========================================================================
fun test() {
    val [a, [[b, c], d]] = [];
    <caret>a;
    <caret>b;
    <caret>c;
    <caret>d;
}
------------------------------------------------------------------------
2:4 -> 1:9 resolved
3:4 -> 1:14 resolved
4:4 -> 1:17 resolved
5:4 -> 1:21 resolved

========================================================================
Local variable with tensor
========================================================================
fun test() {
    val (a, b) = (100, true);
    <caret>a;
    <caret>b;
}
------------------------------------------------------------------------
2:4 -> 1:9 resolved
3:4 -> 1:12 resolved

========================================================================
Local variable from parent scope
========================================================================
fun test() {
    val a = 100;
    if (a == 10) {
        <caret>a;
    }
}
------------------------------------------------------------------------
3:8 -> 1:8 resolved

========================================================================
Local variable from other scope
========================================================================
fun test() {
    if (true) {
        val a = 100;
        <caret>a;
    } else {
        <caret>a;
    }
}
------------------------------------------------------------------------
3:8 -> 2:12 resolved
5:8 unresolved

========================================================================
Local variable before declaration
========================================================================
fun test() {
    <caret>a;
    val a = 100;
}
------------------------------------------------------------------------
1:4 unresolved

========================================================================
Variable from catch clause
========================================================================
fun test() {
    try {

    } catch (error) {
        <caret>error;
    }
}
------------------------------------------------------------------------
4:8 -> 3:13 resolved

========================================================================
Second variable from catch clause
========================================================================
fun test() {
    try {

    } catch (error, data) {
        <caret>data;
    }
}
------------------------------------------------------------------------
4:8 -> 3:20 resolved

========================================================================
Variable from match expression
========================================================================
fun test() {
    match (val res = 10) {
        10 => {
            <caret>res;
        }
    }
}
------------------------------------------------------------------------
3:12 -> 1:15 resolved

========================================================================
Variable from match expression with tuple
========================================================================
fun test() {
    match (val [res, res2] = [10, 20]) {
        10 => {
            <caret>res;
            <caret>res2;
        }
    }
}
------------------------------------------------------------------------
3:12 -> 1:16 resolved
4:12 -> 1:21 resolved

========================================================================
Constant
========================================================================
const FOO = 100;

fun test() {
    <caret>FOO;
}
------------------------------------------------------------------------
3:4 -> 0:6 resolved

========================================================================
Global variable
========================================================================
global foo: int;

fun test() {
    <caret>foo;
}
------------------------------------------------------------------------
3:4 -> 0:7 resolved

========================================================================
Global variable in parameter default value
========================================================================
global foo: int;

fun test(param: int = <caret>foo) {
}
------------------------------------------------------------------------
2:22 -> 0:7 resolved

========================================================================
Type alias
========================================================================
type Int = int;

fun test(): <caret>Int {
}
------------------------------------------------------------------------
2:12 -> 0:5 resolved

========================================================================
Struct
========================================================================
struct Foo {}

fun test(): <caret>Foo {
}
------------------------------------------------------------------------
2:12 -> 0:7 resolved

========================================================================
Function parameters
========================================================================
fun test(param: int) {
    <caret>param;
}
------------------------------------------------------------------------
1:4 -> 0:9 resolved

========================================================================
Function parameters in get methods
========================================================================
get fun test(param: int) {
    <caret>param;
}
------------------------------------------------------------------------
1:4 -> 0:13 resolved

========================================================================
Method self parameter
========================================================================
fun int.test(self) {
    <caret>self;
}
------------------------------------------------------------------------
1:4 -> 0:13 resolved

========================================================================
Function type parameters
========================================================================
fun Foo.test<T, U>(
    param: <caret>T,
): <caret>U {
}
------------------------------------------------------------------------
1:11 -> 0:13 resolved
2:3 -> 0:16 resolved

========================================================================
Struct type parameters
========================================================================
struct Foo<T> {
    field: <caret>T;
}
------------------------------------------------------------------------
1:11 -> 0:11 resolved

========================================================================
Type alias type parameters
========================================================================
type Generic<TName> = Foo<<caret>TName>;
------------------------------------------------------------------------
0:26 -> 0:13 resolved

========================================================================
Get method call
========================================================================
get fun someData(): int {}

fun test() {
    <caret>someData();
}
------------------------------------------------------------------------
3:4 -> 0:8 resolved

========================================================================
Function and type with the same name
========================================================================
type address = builtin;

fun address(): <caret>address {}

fun test() {
    <caret>address();
}
------------------------------------------------------------------------
2:15 -> 0:5 resolved
5:4 -> 2:4 resolved

========================================================================
Function and type with the same name 2
========================================================================
type address = builtin;

fun address(): <caret>address {}

fun test() {
    val addr: <caret>address
        = <caret>address();
}
------------------------------------------------------------------------
2:15 -> 0:5 resolved
5:14 -> 0:5 resolved
6:10 -> 2:4 resolved

========================================================================
Variable shadowing for function
========================================================================
type address = builtin;

fun address(): <caret>address {}

fun test() {
    val address: address = <caret>address();

    <caret>address;

    val foo: <caret>address;
}
------------------------------------------------------------------------
2:15 -> 0:5 resolved
5:27 -> 2:4 resolved
7:4 -> 5:8 resolved
9:13 -> 0:5 resolved

========================================================================
Resolve keyword
========================================================================
<caret>fun test() {
}
------------------------------------------------------------------------
0:0 unresolved

========================================================================
Asm shuffle arguments resolve
========================================================================
@pure
fun builder.storeDict(mutate self, c: dict): self
    asm(
        <caret>c
        <caret>self
    ) "STDICT";
------------------------------------------------------------------------
3:8 -> 1:35 resolved
4:8 -> 1:29 resolved

========================================================================
Do while resolving
========================================================================
fun main() {
    do {
        var a = 10;
    } while (<caret>a);
}
------------------------------------------------------------------------
3:13 -> 2:12 resolved

========================================================================
Match with constant expression
========================================================================
const FOO = 100;

fun main() {
    match (10) {
        <caret>FOO => {}
    }
}
------------------------------------------------------------------------
4:8 -> 0:6 resolved

========================================================================
Match with constant expression and type
========================================================================
const FOO = 100

type Foo = int

fun main() {
    match (10) {
        <caret>FOO => {}
        <caret>Foo => {}
    }
}
------------------------------------------------------------------------
6:8 -> 0:6 resolved
7:8 -> 2:5 resolved
