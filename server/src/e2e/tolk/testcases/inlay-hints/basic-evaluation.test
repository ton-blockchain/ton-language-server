========================================================================
Basic constant evaluation, literals
========================================================================
const INT_CONST = 42;
const HEX_CONST = 0xFF;
const BIN_CONST = 0b1010;
const BOOL_CONST = true;
const NULL_CONST = null;

fun main() {
    return 0;
}
------------------------------------------------------------------------
const INT_CONST/* : int */ = 42;
const HEX_CONST/* : int */ = 0xFF;
const BIN_CONST/* : int */ = 0b1010;
const BOOL_CONST/* : bool */ = true;
const NULL_CONST/* : null */ = null;

fun main()/* : int */ {
    return 0;
}

========================================================================
Binary operations evaluation
========================================================================
const ADD_CONST = 10 + 5;
const SUB_CONST = 20 - 8;
const MUL_CONST = 6 * 7;
const DIV_CONST = 100 / 4;
const MOD_CONST = 17 % 5;
const SHIFT_LEFT = 1 << 3;
const SHIFT_RIGHT = 16 >> 2;
const BIT_AND = 0xFF & 0x0F;
const BIT_OR = 0xF0 | 0x0F;
const BIT_XOR = 0xFF ^ 0xAA;

fun main() {
    return 0;
}
------------------------------------------------------------------------
const ADD_CONST/* : int */ = 10 + 5/*  /* = 15 (0xF) */ */;
const SUB_CONST/* : int */ = 20 - 8/*  /* = 12 (0xC) */ */;
const MUL_CONST/* : int */ = 6 * 7/*  /* = 42 (0x2A) */ */;
const DIV_CONST/* : int */ = 100 / 4/*  /* = 25 (0x19) */ */;
const MOD_CONST/* : int */ = 17 % 5/*  /* = 2 (0x2) */ */;
const SHIFT_LEFT/* : int */ = 1 << 3/*  /* = 8 (0x8) */ */;
const SHIFT_RIGHT/* : int */ = 16 >> 2/*  /* = 4 (0x4) */ */;
const BIT_AND/* : int */ = 0xFF & 0x0F/*  /* = 15 (0xF) */ */;
const BIT_OR/* : int */ = 0xF0 | 0x0F/*  /* = 255 (0xFF) */ */;
const BIT_XOR/* : int */ = 0xFF ^ 0xAA/*  /* = 85 (0x55) */ */;

fun main()/* : int */ {
    return 0;
}

========================================================================
Unary operations evaluation
========================================================================
const NEG_CONST = -42;
const POS_CONST = +100;
const NOT_CONST = !true;
const NOT_FALSE = !false;
const BIT_NOT = ~0xFF;

fun main() {
    return 0;
}
------------------------------------------------------------------------
const NEG_CONST/* : int */ = -42/*  /* = 0x-2A */ */;
const POS_CONST/* : int */ = +100/*  /* = 100 (0x64) */ */;
const NOT_CONST/* : bool */ = !true/*  /* = false */ */;
const NOT_FALSE/* : bool */ = !false/*  /* = true */ */;
const BIT_NOT/* : int */ = ~0xFF/*  /* = 0x-100 */ */;

fun main()/* : int */ {
    return 0;
}

========================================================================
Reference evaluation
========================================================================
const BASE_CONST = 10;
const REF_CONST = BASE_CONST;
const EXPR_CONST = BASE_CONST * 2;
const CHAIN_CONST = REF_CONST + 5;

fun main() {
    return 0;
}
------------------------------------------------------------------------
const BASE_CONST/* : int */ = 10;
const REF_CONST/* : int */ = BASE_CONST/*  /* = 10 (0xA) */ */;
const EXPR_CONST/* : int */ = BASE_CONST * 2/*  /* = 20 (0x14) */ */;
const CHAIN_CONST/* : int */ = REF_CONST + 5/*  /* = 15 (0xF) */ */;

fun main()/* : int */ {
    return 0;
}

========================================================================
Complex expressions evaluation
========================================================================
const COMPLEX1 = (10 + 5) * 2;
const COMPLEX2 = 100 / (4 + 1);
const COMPLEX3 = (1 << 4) | (1 << 2);

fun main() {
    return 0;
}
------------------------------------------------------------------------
const COMPLEX1/* : int */ = (10 + 5) * 2/*  /* = 30 (0x1E) */ */;
const COMPLEX2/* : int */ = 100 / (4 + 1)/*  /* = 20 (0x14) */ */;
const COMPLEX3/* : int */ = (1 << 4) | (1 << 2)/*  /* = 20 (0x14) */ */;

fun main()/* : int */ {
    return 0;
}

========================================================================
Circular dependency handling
========================================================================
const CIRC_A = CIRC_B + 1;
const CIRC_B = CIRC_A - 1;

fun main() {
    return 0;
}
------------------------------------------------------------------------
const CIRC_A/* : int */ = CIRC_B + 1;
const CIRC_B/* : int */ = CIRC_A - 1;

fun main()/* : int */ {
    return 0;
}
