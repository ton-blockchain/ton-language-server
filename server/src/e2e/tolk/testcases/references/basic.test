========================================================================
Local variable references
========================================================================
fun test() {
    val <caret>num = 100;
    if (num == 10) {
        throw num;
    }
}
------------------------------------------------------------------------
References: [2:8, 3:14]
Scope: LocalSearchScope:
{
    val num = 100;
    if (num == 10) {
        throw num;
    }
}

========================================================================
Local backticked variable references
========================================================================
fun test() {
    val <caret>`hello world` = 100;
    if (`hello world` == 10) {
        throw `hello world`;
    }
}
------------------------------------------------------------------------
References: [2:8, 3:14]
Scope: LocalSearchScope:
{
    val `hello world` = 100;
    if (`hello world` == 10) {
        throw `hello world`;
    }
}

========================================================================
Local tuple variable references
========================================================================
fun test() {
    val [
        <caret>num,
        <caret>other
    ] = [100, 200];
    if (num == 10) {
        throw other;
    }
}
------------------------------------------------------------------------
References: [5:8]
Scope: LocalSearchScope:
{
    val [
        num,
        other
    ] = [100, 200];
    if (num == 10) {
        throw other;
    }
}

References: [6:14]
Scope: LocalSearchScope:
{
    val [
        num,
        other
    ] = [100, 200];
    if (num == 10) {
        throw other;
    }
}

========================================================================
Local variable references from different scopes
========================================================================
fun test() {
    {
        val <caret>num = 100;
        if (num == 10) {
            throw num;
        }
    }

    {
        val <caret>num = 500;
        if (num == 100) {
            throw num;
        }
    }
}
------------------------------------------------------------------------
References: [3:12, 4:18]
Scope: LocalSearchScope:
{
        val num = 100;
        if (num == 10) {
            throw num;
        }
    }

References: [10:12, 11:18]
Scope: LocalSearchScope:
{
        val num = 500;
        if (num == 100) {
            throw num;
        }
    }

========================================================================
Local variable with redef references
========================================================================
fun test() {
    val <caret>a = 100;
    val a redef = 100;
    a;
}
------------------------------------------------------------------------
References: [2:8, 3:4]
Scope: LocalSearchScope:
{
    val a = 100;
    val a redef = 100;
    a;
}

========================================================================
Local variable with redef references from redef itself
========================================================================
fun test() {
    val a = 100;
    val <caret>a redef = 100;
    a;
}
------------------------------------------------------------------------
References: [2:8, 3:4]
Scope: LocalSearchScope:
{
    val a = 100;
    val a redef = 100;
    a;
}

========================================================================
Local variable references to struct init short field
========================================================================
struct Foo {
    value: int,
}

fun test() {
    val <caret>value = 100;
    Foo { value };
}
------------------------------------------------------------------------
References: [6:10]
Scope: LocalSearchScope:
{
    val value = 100;
    Foo { value };
}

========================================================================
Catch variable references
========================================================================
fun test() {
    try {} catch (<caret>error) {
        val e = error as int;
        if (e == 10) {
            throw e;
        }
    }
}
------------------------------------------------------------------------
References: [2:16]
Scope: LocalSearchScope:
{
        val e = error as int;
        if (e == 10) {
            throw e;
        }
    }

========================================================================
Second catch variable references
========================================================================
fun test() {
    try {} catch (error, <caret>data) {
        val e = data as int;
        if (e == 10) {
            throw e;
        }
    }
}
------------------------------------------------------------------------
References: [2:16]
Scope: LocalSearchScope:
{
        val e = data as int;
        if (e == 10) {
            throw e;
        }
    }

========================================================================
Parameter references
========================================================================
fun test(<caret>foo: int) {
    if (foo == 10) {
        throw foo;
    }
}
------------------------------------------------------------------------
References: [1:8, 2:14]
Scope: LocalSearchScope:
{
    if (foo == 10) {
        throw foo;
    }
}

========================================================================
Parameter references inside instance method
========================================================================
fun int.test(self, <caret>foo: int) {
    assert(self != 0) throw 12;

    if (foo == 10) {
        throw foo;
    }
}
------------------------------------------------------------------------
References: [3:8, 4:14]
Scope: LocalSearchScope:
{
    assert(self != 0) throw 12;

    if (foo == 10) {
        throw foo;
    }
}

========================================================================
Parameter references to struct init short field
========================================================================
struct Foo {
    value: int,
}

fun test(<caret>value: int) {
    Foo { value };
}
------------------------------------------------------------------------
References: [5:10]
Scope: LocalSearchScope:
{
    Foo { value };
}

========================================================================
Global variable references
========================================================================
global <caret>foo: int = 100;

fun test() {
    if (foo == 10) {
        throw foo;
    }
}

fun test2() {
    if (foo == 100) {
        throw foo + 200;
    }
}
------------------------------------------------------------------------
References: [3:8, 4:14, 9:8, 10:14]
Scope: GlobalSearchScope{test.tolk}

========================================================================
Function references
========================================================================
fun <caret>test() {}

fun test2() {
    test();
    test();
    test();
}
------------------------------------------------------------------------
References: [3:4, 4:4, 5:4]
Scope: GlobalSearchScope{test.tolk}

========================================================================
Static method references
========================================================================
struct Foo {}

fun Foo.<caret>test() {}

fun test2() {
    Foo.test();
}
------------------------------------------------------------------------
References: [5:8]
Scope: GlobalSearchScope{test.tolk}

========================================================================
Instance method references
========================================================================
struct Foo {}

fun Foo.<caret>test(self) {}

fun test2() {
    val foo = Foo {};
    foo.test();
}
------------------------------------------------------------------------
References: [6:8]
Scope: GlobalSearchScope{test.tolk}

========================================================================
Instance method references via alias
========================================================================
struct Foo {}

fun Foo.<caret>test(self) {}

type FooAlias = Foo;

fun test2() {
    val foo: FooAlias = {};
    foo.test();
}
------------------------------------------------------------------------
References: [8:8]
Scope: GlobalSearchScope{test.tolk}

========================================================================
Constant references
========================================================================
const <caret>FOO = 100;

fun test2() {
    if (FOO == 100) {
        throw FOO;
    }
}
------------------------------------------------------------------------
References: [3:8, 4:14]
Scope: GlobalSearchScope{test.tolk}

========================================================================
Type alias references
========================================================================
type <caret>Int = int;

struct Foo {
    field: Int;
}

fun test2(a: Int): Int {}
------------------------------------------------------------------------
References: [3:11, 6:13, 6:19]
Scope: GlobalSearchScope{test.tolk}

========================================================================
Type alias references from usage
========================================================================
type Int = int;

struct Foo {
    field: Int;
}

fun test2(a: <caret>Int): Int {}
------------------------------------------------------------------------
References: [3:11, 6:13, 6:19]
Scope: GlobalSearchScope{test.tolk}

========================================================================
Struct references
========================================================================
struct <caret>Foo {
    field: Int;
}

fun test2(a: Foo): Foo {
    val foo: Foo = {};
    val bar = Foo {};
}
------------------------------------------------------------------------
References: [4:13, 4:19, 5:13, 6:14]
Scope: GlobalSearchScope{test.tolk}

========================================================================
Struct keyword references
========================================================================
type Int = int;

<caret>struct Foo {
    field: Int;
}

fun test2(a: Int): Int {}
------------------------------------------------------------------------
References: []
Scope: Scope not found

========================================================================
Get method references
========================================================================
get fun someData(): int {}

fun test() {
    <caret>someData();
}
------------------------------------------------------------------------
References: [3:4]
Scope: GlobalSearchScope{test.tolk}

========================================================================
Do while references
========================================================================
fun main() {
    do {
        var <caret>a = 10;
    } while (a);
}
------------------------------------------------------------------------
References: [3:13]
Scope: LocalSearchScope:
do {
        var a = 10;
    } while (a)

========================================================================
Struct references with generic type
========================================================================
struct <caret>Config {}

struct Storage {
  config: Cell<Config>
}

fun Storage.load() {
    return Storage.fromCell(contract.getData())
}

fun name() {
    var st = Storage.load();
    val config = st.config.load();
}
------------------------------------------------------------------------
References: [3:15]
Scope: GlobalSearchScope{test.tolk}
