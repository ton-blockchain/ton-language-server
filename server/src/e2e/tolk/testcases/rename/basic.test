========================================================================
Rename local variable
========================================================================
fun test() {
    val num = 100;
    if (num == 10) {
        throw num;
//!           ^ errno
    }
}
------------------------------------------------------------------------
fun test() {
    val errno = 100;
    if (errno == 10) {
        throw errno;
//!           ^ errno
    }
}

========================================================================
Rename local backticked variable
========================================================================
fun test() {
    val `hello world` = 100;
    if (`hello world` == 10) {
//!     ^ `hello earth`
        throw `hello world`;
    }
}
------------------------------------------------------------------------
fun test() {
    val `hello earth` = 100;
    if (`hello earth` == 10) {
//!     ^ `hello earth`
        throw `hello earth`;
    }
}

========================================================================
Rename local variable to non identifier name
========================================================================
fun test() {
    val foo = 100;
    if (foo == 10) {
//!     ^ `hello world`
        throw foo;
    }
}
------------------------------------------------------------------------
fun test() {
    val `hello world` = 100;
    if (`hello world` == 10) {
//!     ^ `hello world`
        throw `hello world`;
    }
}

========================================================================
Rename local variable from different scope
========================================================================
fun test() {
    {
        val num = 100;
        if (num == 10) {
            throw num;
//!               ^ errno
        }
    }
    {
        val num = 100;
        if (num == 10) {
            throw num;
        }
    }
}
------------------------------------------------------------------------
fun test() {
    {
        val errno = 100;
        if (errno == 10) {
            throw errno;
//!               ^ errno
        }
    }
    {
        val num = 100;
        if (num == 10) {
            throw num;
        }
    }
}

========================================================================
Local tuple variable rename
========================================================================
fun test() {
    val [num, other] = [100, 200];
//!           ^ error
    if (num == 10) {
        throw other;
    }
}
------------------------------------------------------------------------
fun test() {
    val [num, error] = [100, 200];
//!           ^ error
    if (num == 10) {
        throw error;
    }
}

========================================================================
Catch variable rename
========================================================================
fun test() {
    try {} catch (error) {
        val e = error as int;
//!             ^ err
        if (e == 10) {
            throw e;
        }
    }
}
------------------------------------------------------------------------
fun test() {
    try {} catch (err) {
        val e = err as int;
//!             ^ err
        if (e == 10) {
            throw e;
        }
    }
}

========================================================================
Second catch variable rename
========================================================================
fun test() {
    try {} catch (error, data) {
//!                      ^ d
        val e = data as int;
        if (e == 10) {
            throw e;
        }
    }
}
------------------------------------------------------------------------
fun test() {
    try {} catch (error, d) {
//!                      ^ d
        val e = d as int;
        if (e == 10) {
            throw e;
        }
    }
}

========================================================================
Parameter rename
========================================================================
fun test(foo: int) {
    if (foo == 10) {
        throw foo;
//!           ^ bar
    }
}
------------------------------------------------------------------------
fun test(bar: int) {
    if (bar == 10) {
        throw bar;
//!           ^ bar
    }
}

========================================================================
Global variable rename
========================================================================
global foo: int = 100;
//!    ^ BAR

fun test() {
    if (foo == 10) {
        throw foo;
    }
}

fun test2() {
    if (foo == 100) {
        throw foo + 200;
    }
}
------------------------------------------------------------------------
global BAR: int = 100;
//!    ^ BAR

fun test() {
    if (BAR == 10) {
        throw BAR;
    }
}

fun test2() {
    if (BAR == 100) {
        throw BAR + 200;
    }
}

========================================================================
Function rename
========================================================================
fun test() {}

fun test2() {
    test();
    test();
//! ^ someFunction
    test();
}
------------------------------------------------------------------------
fun someFunction() {}

fun test2() {
    someFunction();
    someFunction();
//! ^ someFunction
    someFunction();
}

========================================================================
Static method rename
========================================================================
struct Foo {}

fun Foo.test() {}
//!     ^ bar

fun test2() {
    Foo.test();
}
------------------------------------------------------------------------
struct Foo {}

fun Foo.bar() {}
//!     ^ bar

fun test2() {
    Foo.bar();
}

========================================================================
Instance method rename
========================================================================
struct Foo {}

fun Foo.test(self) {}
//!     ^ bar

fun test2() {
    val foo: Foo = {};
    foo.test();
}
------------------------------------------------------------------------
struct Foo {}

fun Foo.bar(self) {}
//!     ^ bar

fun test2() {
    val foo: Foo = {};
    foo.bar();
}

========================================================================
Constant rename
========================================================================
const FOO = 100;
//!   ^ BAR

fun test2() {
    if (FOO == 100) {
        throw FOO;
    }
}
------------------------------------------------------------------------
const BAR = 100;
//!   ^ BAR

fun test2() {
    if (BAR == 100) {
        throw BAR;
    }
}

========================================================================
Type alias rename
========================================================================
type Int = int;

struct Foo {
    field: Int;
//!        ^ MyInt
}

fun test2(a: Int): Int {}
------------------------------------------------------------------------
type MyInt = int;

struct Foo {
    field: MyInt;
//!        ^ MyInt
}

fun test2(a: MyInt): MyInt {}

========================================================================
Struct rename
========================================================================
struct Foo {
    field: int;
}

fun test2(a: Foo): Foo {
    val foo: Foo = {};
    val bar = Foo {};
//!           ^ Bar
}
------------------------------------------------------------------------
struct Bar {
    field: int;
}

fun test2(a: Bar): Bar {
    val foo: Bar = {};
    val bar = Bar {};
//!           ^ Bar
}

========================================================================
Struct field rename
========================================================================
struct Foo {
    field: int;
//! ^ newField
}

fun test2(a: Foo) {
    val foo: Foo = { field: 10 };
    foo.field;
    a.field;
}
------------------------------------------------------------------------
struct Foo {
    newField: int;
//! ^ newField
}

fun test2(a: Foo) {
    val foo: Foo = { newField: 10 };
    foo.newField;
    a.newField;
}

========================================================================
Struct field rename with cursor on : (like when select all name in editor)
========================================================================
struct Foo {
    field: int;
//!      ^ newField
}

fun test2(a: Foo) {
    val foo: Foo = { field: 10 };
    foo.field;
    a.field;
}
------------------------------------------------------------------------
struct Foo {
    newField: int;
//!      ^ newField
}

fun test2(a: Foo) {
    val foo: Foo = { newField: 10 };
    foo.newField;
    a.newField;
}

========================================================================
Struct field rename for short init
========================================================================
struct Foo {
    field: int;
//! ^ newField
}

fun test2(a: Foo, field: int) {
    val foo: Foo = { field };
    foo.field;
    a.field;
}
------------------------------------------------------------------------
struct Foo {
    newField: int;
//! ^ newField
}

fun test2(a: Foo, field: int) {
    val foo: Foo = { newField: field };
    foo.newField;
    a.newField;
}

========================================================================
Parameter rename for short init
========================================================================
struct Foo {
    field: int;
}

fun test2(a: Foo, field: int) {
//!               ^ value
    val foo: Foo = { field };
    foo.field;
    a.field;
}
------------------------------------------------------------------------
struct Foo {
    field: int;
}

fun test2(a: Foo, value: int) {
//!               ^ value
    val foo: Foo = { field: value };
    foo.field;
    a.field;
}

========================================================================
Local variable rename for short init
========================================================================
struct Foo {
    field: int;
}

fun test2(a: Foo) {
    val field = 0;
//!     ^ value
    val foo: Foo = { field };
    foo.field;
    a.field;
}
------------------------------------------------------------------------
struct Foo {
    field: int;
}

fun test2(a: Foo) {
    val value = 0;
//!     ^ value
    val foo: Foo = { field: value };
    foo.field;
    a.field;
}

========================================================================
Rename keyword
========================================================================
fun test() {
    val num = 100;
    if (num == 10) {
        throw num;
//!     ^ errno
    }
}
------------------------------------------------------------------------
The element can't be renamed.

========================================================================
Rename builtin type
========================================================================
fun test(): int {
//!         ^ bool
}
------------------------------------------------------------------------
The element can't be renamed.

========================================================================
Rename stdlib function
========================================================================
fun test(): int {
    minMax();
//! ^ otherFunc
}
------------------------------------------------------------------------
The element can't be renamed.

========================================================================
Wrap in backtick for keyword name
========================================================================
fun foo() {}

fun test(): int {
    foo();
//! ^ return
}
------------------------------------------------------------------------
fun `return`() {}

fun test(): int {
    `return`();
//! ^ return
}

========================================================================
Wrap in backtick for keyword name 2
========================================================================
fun foo() {}

fun test(): int {
    foo();
//! ^ match
}
------------------------------------------------------------------------
fun `match`() {}

fun test(): int {
    `match`();
//! ^ match
}

========================================================================
Rename struct name with methods
========================================================================
struct Storage {}
//!    ^ MyStorage

fun Storage.load() {
    return Storage.fromCell(contract.getData());
}

fun Storage.save(self) {
    contract.setData(self.toCell());
}
------------------------------------------------------------------------
struct MyStorage {}
//!    ^ MyStorage

fun MyStorage.load() {
    return MyStorage.fromCell(contract.getData());
}

fun MyStorage.save(self) {
    contract.setData(self.toCell());
}
