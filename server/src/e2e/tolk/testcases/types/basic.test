========================================================================
Assignment type inference
========================================================================
fun main() {
    val a = 100;
    val b = a = 200;
    //! ^ int
}
------------------------------------------------------------------------
ok

========================================================================
Set assignment type inference
========================================================================
fun main() {
    val a = 100;
    val b = a += 200;
    //! ^ int
}
------------------------------------------------------------------------
ok

========================================================================
Ternary expression type inference
========================================================================
fun main(cond: bool) {
    val b = cond ? 10 : 20;
    //! ^ int
}
------------------------------------------------------------------------
ok

========================================================================
Ternary expression type inference with true null branch
========================================================================
fun main(cond: bool) {
    val b = cond ? null : 20;
    //! ^ int?
}
------------------------------------------------------------------------
ok

========================================================================
Ternary expression type inference with false null branch
========================================================================
fun main(cond: bool) {
    val b = cond ? 10 : null;
    //! ^ int?
}
------------------------------------------------------------------------
ok

========================================================================
Ternary expression type inference with different types
========================================================================
fun main(cond: bool) {
    val b = cond ? 10 : "hello";
    //! ^ int | slice
}
------------------------------------------------------------------------
ok

========================================================================
Binary expression type inference
========================================================================
fun main() {
    val b1 = 10 + 20;
    //! ^ int

    val b2 = true && true;
    //! ^ bool

    val b3 = false || false;
    //! ^ bool

    val b4 = 10 == 20;
    //! ^ bool

    val b5 = 10 != 20;
    //! ^ bool

    val b6 = 10 > 20;
    //! ^ bool

    val b7 = 10 < 20;
    //! ^ bool
}
------------------------------------------------------------------------
ok

========================================================================
Binary expression type inference for uint32-like types
========================================================================
fun main(first: uint32, second: uint245) {
    val b = first + second;
    //! ^ int
}
------------------------------------------------------------------------
ok

========================================================================
Unary expression type inference
========================================================================
fun main(value: int) {
    val b1 = !true;
    //! ^ bool

    val b2 = -value;
    //! ^ int

    val b3 = +value;
    //! ^ int
}
------------------------------------------------------------------------
ok

========================================================================
As cast type inference
========================================================================
fun main(value: bool) {
    val data = value as int;
    //! ^ int
}
------------------------------------------------------------------------
ok

========================================================================
Is operator type inference
========================================================================
fun main(value: int | bool) {
    val data = value is int;
    //! ^ bool
}
------------------------------------------------------------------------
ok

========================================================================
Not null operator type inference
========================================================================
fun main(value: int?) {
    val data = value!;
    //! ^ int
}
------------------------------------------------------------------------
ok

========================================================================
Field access type inference
========================================================================
struct Foo {
    data: int,
}

fun main(value: Foo) {
    val data = value.data;
    //! ^ int
}
------------------------------------------------------------------------
ok

========================================================================
Function call type inference
========================================================================
fun getSome(): int {}

fun main(value: Foo) {
    val data = getSome();
    //! ^ int
}
------------------------------------------------------------------------
ok

========================================================================
Paren expression type inference
========================================================================
fun getSome(): int {}

fun main(value: Foo) {
    val data = ((((getSome()))));
    //! ^ int
}
------------------------------------------------------------------------
ok

========================================================================
Object literal expression type inference
========================================================================
struct Foo {
    data: int,
    other: bool,
}

fun main() {
    val data = Foo { data: 10, other: true };
    //! ^ Foo
}
------------------------------------------------------------------------
ok

========================================================================
Short object literal expression type inference with hint
========================================================================
struct Foo {
    data: int,
    other: bool,
}

fun main() {
    val data = { data: 10, other: true };
    //! ^ unknown
}
------------------------------------------------------------------------
ok

========================================================================
Number literal type inference
========================================================================
fun main() {
    val data = 10;
    //! ^ int
}
------------------------------------------------------------------------
ok

========================================================================
String literal type inference
========================================================================
fun main() {
    val data = "hello";
    //! ^ slice
}
------------------------------------------------------------------------
ok

========================================================================
Boolean literal type inference
========================================================================
fun main() {
    val data = true;
    //! ^ bool
}
------------------------------------------------------------------------
ok

========================================================================
Null literal type inference
========================================================================
type null = builtin;

fun main() {
    val data = null;
    //! ^ null
}
------------------------------------------------------------------------
ok

========================================================================
Variable reference type inference
========================================================================
fun main() {
    val data = 10;
    val other = data;
    //! ^ int
}
------------------------------------------------------------------------
ok

========================================================================
Tuple literal type inference
========================================================================
fun main() {
    val data = [1, true, "hello"];
    //! ^ [int, bool, slice]
}
------------------------------------------------------------------------
ok

========================================================================
Tensor literal type inference
========================================================================
fun main() {
    val data = (1, true, "hello");
    //! ^ (int, bool, slice)
}
------------------------------------------------------------------------
ok

========================================================================
Complex tensor literal type inference
========================================================================
fun main() {
    val data = (1, [1, [1, true, "hello"], (1, [1, [1, true, "hello"], "hello"], "hello")], "hello");
    //! ^ (int, [int, [int, bool, slice], (int, [int, [int, bool, slice], slice], slice)], slice)
}
------------------------------------------------------------------------
ok

========================================================================
Tuple type inference
========================================================================
struct Foo {
    field: [int, slice, bool];
//! ^ [int, slice, bool]
}
------------------------------------------------------------------------
ok

========================================================================
Tensor type inference
========================================================================
struct Foo {
    field: (int, slice, bool);
//! ^ (int, slice, bool)
}
------------------------------------------------------------------------
ok

========================================================================
Numeric index type inference for tuple type
========================================================================
struct Foo {
    field: (int, slice, bool);
}

fun main() {
    val foo: Foo = {};

    val first = foo.field.0;
//!     ^ int

    val second = foo.field.1;
//!     ^ slice

    val third = foo.field.2;
//!     ^ bool

    val fourth = foo.field.3;
//!     ^ unknown
}
------------------------------------------------------------------------
ok

========================================================================
Numeric index type inference for tensor type
========================================================================
struct Foo {
    field: [int, slice, bool];
}

fun main() {
    val foo: Foo = {};

    val first = foo.field.0;
//!     ^ int

    val second = foo.field.1;
//!     ^ slice

    val third = foo.field.2;
//!     ^ bool

    val fourth = foo.field.3;
//!     ^ unknown
}
------------------------------------------------------------------------
ok

========================================================================
Lazy expression type inference
========================================================================
fun main() {
    val a = lazy 100;
    //! ^ int
}
------------------------------------------------------------------------
ok

========================================================================
Try catch variable type inference
========================================================================
fun main() {
    try {} catch (e) {}
//!               ^ int
}
------------------------------------------------------------------------
ok

========================================================================
Try catch variable 2 type inference
========================================================================
fun main() {
    try {} catch (e, d) {}
//!                  ^ unknown
}
------------------------------------------------------------------------
ok

========================================================================
Cyclic dependency with Cell in struct
========================================================================
struct SwapStep {
    nextStep: Cell<SwapStep>?
}

fun main() {
    val foo = SwapStep{};
//!     ^ SwapStep
    val step = foo.nextStep!;
//!     ^ Cell<SwapStep>
    val loadedStep = foo.nextStep!.load();
//!     ^ SwapStep
}
------------------------------------------------------------------------
ok
